#!/usr/bin/env ruby
#-*- ruby -*-
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
  require 'gestion-cine'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/gestion-cine` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/gestion-cine now"
  exit 64
end

include GLI::App

DEPOT_DEFAUT = '.db.json'
#GestionCine = GestionCine

program_desc 'Application pour la gestion d un cinema (banque de films)'

version GestionCine::VERSION

subcommand_option_handling :normal
arguments :strict

desc 'Depot de donnees a utiliser pour la banque de films'
default_value DEPOT_DEFAUT
flag :depot
arg_name 'nom_de_fichier'

####################################
#           Commanades             #
####################################

desc 'Lister les films qui presents dans la base de donnees'
command :lister do |lister|
  lister.desc 'Option a utiliser pendant le listing (annee, top, duree)'
  lister.flag :option, :arg_name => 'option'

  lister.desc 'Format a utiliser pour l affichage du listing'
  lister.flag :format, :arg_name => 'le_format'

  lister.desc 'Listing selon le mois indique'
  lister.flag :mois, :arg_name => 'mois'

  lister.action do |_global_options,options,args|
    le_format = options[:format]
    mois = options[:mois]
    option = options[:option]

    films = GestionCine::BanqueDeFilms.les_films( mois )
    if option.nil?
      films = films.sort
    elsif option == "annee"
      films = films.sort_by(&:annee).reverse!
    elsif option == "top"
      films = films.sort_by(&:note)
    elsif option == "duree"
      films = films.sort_by(&:duree)
    end

    listing = films .map { |e| e.to_s( le_format ) << "\n" }
                  .join

    puts listing unless listing.empty?
  end
end


desc "Cree une nouvelle base de donnees pour gerer des cours (dans './#{DEPOT_DEFAUT}' si --depot n'est pas specifie)"
skips_pre
skips_post
command :init do |init|
  init.desc 'Indique de detruire le fichier si il existe deja'
  init.switch :detruire

  init.action do |global_options,options,args|
    GestionCine::BanqueDeFilms.init( global_options[:depot], options[:detruire] )
  end
end




desc 'Describe delete here'
arg_name 'Describe arguments to delete here'
command :delete do |c|
  c.action do |global_options,options,args|
    puts "delete command ran"
  end
end

desc 'Describe print here'
arg_name 'Describe arguments to print here'
command :print do |c|
  c.action do |global_options,options,args|
    puts "print comman d ran"
  end
end

###################################################
# Pre/post hook des commandes et lancement du programme
###################################################

pre do |global,command,options,args|
  GestionCine::BanqueDeFilms.charger( global[:depot] )
  true
end

post do |global,command,options,args|
  GestionCine::BanqueDeFilms.sauver
end

###################################################
# Methodes pour traitement des erreurs.
###################################################

def erreur( msg )
  exit_now! "*** Erreur: #{msg}"
end

def erreur_nb_arguments( *args )
  erreur "Nombre incorrect d'arguments: <<#{args.join(' ')}>>"
end

on_error do |exception|
  STDERR.puts "*** Exception signalee dans bin/gestion-cine!!"
  STDERR.puts "exception = #{exception.inspect}"
  STDERR.puts exception.backtrace

  false
end

exit run(ARGV)
